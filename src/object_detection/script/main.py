import math
import numpy as np
grid_rows = 6
grid_cols = 7
red_stone = 0
blue_stone = 0


class Chip:
    def __init__(self, bounding_box, label, confidence):
        self.bounding_box = bounding_box  # List of 4 float numbers: [x, y, width, height]
        self.label = label  # Integer representing the label
        self.confidence = confidence  # Float representing the confidence score

    def __repr__(self):
        return f"Chip(bounding_box={self.bounding_box}, label={self.label}, confidence={self.confidence})"

def get_chips_correct():
        Chips_correct = [Chip([757.431884765625, 458.43499755859375, 71.52508544921875, 70.00146484375], 1, 0.8793290257453918),
        Chip([756.863037109375, 377.8887634277344, 71.99237060546875, 70.31463623046875],1,  0.873580276966095),
        Chip([963.1853637695312, 210.51318359375, 74.4136962890625, 72.75926208496094],0,  0.8688976168632507),
        Chip([454.41766357421875, 382.8651123046875, 71.28396606445312, 69.78067016601562],0,  0.8659213781356812),
        Chip([759.2469482421875, 540.6907348632812, 73.46337890625, 71.12646484375],0,  0.8630877733230591),
        Chip([551.5955810546875, 219.7051239013672, 69.79730224609375, 71.05615234375],0,  0.8621225953102112),
        Chip([455.3941650390625, 462.3099670410156, 70.95352172851562, 69.4892578125],0,  0.8618773221969604),
        Chip([858.6318359375, 212.7769012451172, 74.845947265625, 72.25527954101562],0,  0.8611637353897095),
        Chip([861.9000244140625, 540.4012451171875, 75.37109375, 72.67733764648438],0,  0.8601288795471191),
        Chip([657.3837280273438, 541.4761962890625, 72.5870361328125, 70.89199829101562],0,  0.8588942289352417),
        Chip([753.2552490234375, 132.40829467773438, 70.80914306640625, 72.8939437866211],1,  0.8588289022445679),
        Chip([550.8143310546875, 138.28431701660156, 70.27386474609375, 73.83698272705078],0,  0.8581244945526123),
        Chip([966.580078125, 540.0601806640625, 74.5810546875, 73.21759033203125],0,  0.8578727841377258),
        Chip([859.660888671875, 376.86602783203125, 74.03106689453125, 70.64620971679688],0,  0.8562230467796326),
        Chip([652.8841552734375, 216.8964080810547, 71.87200927734375, 72.11856079101562],0,  0.8558927178382874),
        Chip([452.9756774902344, 302.4188537597656, 71.64715576171875, 71.73211669921875],0,  0.8558539748191833),
        Chip([858.5325927734375, 294.9300842285156, 74.7177734375, 71.93017578125],0,  0.8547179698944092),
        Chip([455.9156494140625, 544.0158081054688, 70.76522827148438, 70.6279296875],0,  0.8543019890785217),
        Chip([755.4547729492188, 295.90179443359375, 72.4365234375, 71.86251831054688],1,  0.8529680371284485),
        Chip([553.4275512695312, 300.57879638671875, 72.4171142578125, 71.06283569335938],0,  0.8528613448143005),
        Chip([964.008056640625, 292.48114013671875, 75.14727783203125, 73.08787536621094],0,  0.851658821105957),
        Chip([754.722412109375, 214.30902099609375, 71.40838623046875, 69.93672180175781],2,  0.8513271808624268),
        Chip([450.794189453125, 221.65708923339844, 72.2364501953125, 72.38320922851562],0,  0.8512446284294128),
        Chip([650.9053955078125, 135.57974243164062, 70.49737548828125, 71.04560852050781],2,  0.850885272026062),
        Chip([1070.109130859375, 290.85577392578125, 73.9307861328125, 72.13796997070312],0,  0.8506991267204285),
        Chip([1072.266845703125, 457.3724365234375, 75.3248291015625, 72.60195922851562],0,  0.8496987819671631),
        Chip([860.6873168945312, 457.35980224609375, 74.2991943359375, 70.03640747070312],0,  0.8496351838111877),
        Chip([965.5115356445312, 457.27874755859375, 74.5234375, 71.0224609375],0,  0.8492321968078613),
        Chip([964.5504150390625, 374.77911376953125, 75.57659912109375, 72.96340942382812],0,  0.848352313041687),
        Chip([556.5145263671875, 542.5208129882812, 71.96148681640625, 70.9677734375],0,  0.8477851152420044),
        Chip([1071.483642578125, 373.90106201171875, 73.953125, 72.93179321289062],0,  0.8456478714942932),
        Chip([654.414306640625, 298.6116638183594, 72.26727294921875, 72.14862060546875],0,  0.8445784449577332),
        Chip([963.0359497070312, 126.91935729980469, 73.9437255859375, 75.3408203125],0,  0.8430204391479492),
        Chip([1069.470458984375, 208.43014526367188, 72.97265625, 73.54804992675781],0,  0.8426612019538879),
        Chip([554.5009765625, 381.0021057128906, 72.2193603515625, 70.09014892578125, ],0,  0.8417767286300659),
        Chip([655.8125, 379.6029357910156, 72.1431884765625, 70.05419921875],0,  0.8399310111999512),
        Chip([656.82080078125, 459.6365966796875, 71.848388671875, 69.56192016601562, ],0,  0.8398562073707581),
        Chip([555.624267578125, 460.88177490234375, 70.50860595703125, 69.33505249023438],0,  0.8398104310035706),
        Chip([1073.287353515625, 540.4985961914062, 74.7724609375, 71.8447265625],0,  0.8379409313201904),
        Chip([858.1256713867188, 129.2469482421875, 74.2943115234375, 76.07095336914062],0,  0.8313237428665161),
        Chip([1071.78759765625, 123.8318099975586, 79.2230224609375, 76.13334655761719],0,  0.8153116703033447),
        Chip([446.7274475097656, 139.97897338867188, 76.18682861328125, 75.1452865600586],0,  0.7966620922088623)]
        return Chips_correct

#enth√§lt einen Stein zu viel, der eine niedrigere confidence hat und deshalb rausgefiltert werden sollte        
def get_chips_too_many():
    Chips_too_many =  [Chip([757.431884765625, 458.43499755859375, 71.52508544921875, 70.00146484375], 1, 0.8793290257453918),
    Chip([560, 220, 69, 71], 0,  0.54), #test-Stein
    Chip([756.863037109375, 377.8887634277344, 71.99237060546875, 70.31463623046875],1,  0.873580276966095),
    Chip([963.1853637695312, 210.51318359375, 74.4136962890625, 72.75926208496094],0,  0.8688976168632507),
    Chip([454.41766357421875, 382.8651123046875, 71.28396606445312, 69.78067016601562],0,  0.8659213781356812),
    Chip([759.2469482421875, 540.6907348632812, 73.46337890625, 71.12646484375],0,  0.8630877733230591),
    Chip([551.5955810546875, 219.7051239013672, 69.79730224609375, 71.05615234375],0,  0.8621225953102112),
    Chip([455.3941650390625, 462.3099670410156, 70.95352172851562, 69.4892578125],0,  0.8618773221969604),
    Chip([858.6318359375, 212.7769012451172, 74.845947265625, 72.25527954101562],0,  0.8611637353897095),
    Chip([861.9000244140625, 540.4012451171875, 75.37109375, 72.67733764648438],0,  0.8601288795471191),
    Chip([657.3837280273438, 541.4761962890625, 72.5870361328125, 70.89199829101562],0,  0.8588942289352417),
    Chip([753.2552490234375, 132.40829467773438, 70.80914306640625, 72.8939437866211],1,  0.8588289022445679),
    Chip([550.8143310546875, 138.28431701660156, 70.27386474609375, 73.83698272705078],0,  0.8581244945526123),
    Chip([966.580078125, 540.0601806640625, 74.5810546875, 73.21759033203125],0,  0.8578727841377258),
    Chip([859.660888671875, 376.86602783203125, 74.03106689453125, 70.64620971679688],0,  0.8562230467796326),
    Chip([652.8841552734375, 216.8964080810547, 71.87200927734375, 72.11856079101562],0,  0.8558927178382874),
    Chip([452.9756774902344, 302.4188537597656, 71.64715576171875, 71.73211669921875],0,  0.8558539748191833),
    Chip([858.5325927734375, 294.9300842285156, 74.7177734375, 71.93017578125],0,  0.8547179698944092),
    Chip([455.9156494140625, 544.0158081054688, 70.76522827148438, 70.6279296875],0,  0.8543019890785217),
    Chip([755.4547729492188, 295.90179443359375, 72.4365234375, 71.86251831054688],1,  0.8529680371284485),
    Chip([553.4275512695312, 300.57879638671875, 72.4171142578125, 71.06283569335938],0,  0.8528613448143005),
    Chip([964.008056640625, 292.48114013671875, 75.14727783203125, 73.08787536621094],0,  0.851658821105957),
    Chip([754.722412109375, 214.30902099609375, 71.40838623046875, 69.93672180175781],2,  0.8513271808624268),
    Chip([450.794189453125, 221.65708923339844, 72.2364501953125, 72.38320922851562],0,  0.8512446284294128),
    Chip([650.9053955078125, 135.57974243164062, 70.49737548828125, 71.04560852050781],2,  0.850885272026062),
    Chip([1070.109130859375, 290.85577392578125, 73.9307861328125, 72.13796997070312],0,  0.8506991267204285),
    Chip([1072.266845703125, 457.3724365234375, 75.3248291015625, 72.60195922851562],0,  0.8496987819671631),
    Chip([860.6873168945312, 457.35980224609375, 74.2991943359375, 70.03640747070312],0,  0.8496351838111877),
    Chip([965.5115356445312, 457.27874755859375, 74.5234375, 71.0224609375],0,  0.8492321968078613),
    Chip([964.5504150390625, 374.77911376953125, 75.57659912109375, 72.96340942382812],0,  0.848352313041687),
    Chip([556.5145263671875, 542.5208129882812, 71.96148681640625, 70.9677734375],0,  0.8477851152420044),
    Chip([1071.483642578125, 373.90106201171875, 73.953125, 72.93179321289062],0,  0.8456478714942932),
    Chip([654.414306640625, 298.6116638183594, 72.26727294921875, 72.14862060546875],0,  0.8445784449577332),
    Chip([963.0359497070312, 126.91935729980469, 73.9437255859375, 75.3408203125],0,  0.8430204391479492),
    Chip([1069.470458984375, 208.43014526367188, 72.97265625, 73.54804992675781],0,  0.8426612019538879),
    Chip([554.5009765625, 381.0021057128906, 72.2193603515625, 70.09014892578125, ],0,  0.8417767286300659),
    Chip([655.8125, 379.6029357910156, 72.1431884765625, 70.05419921875],0,  0.8399310111999512),
    Chip([656.82080078125, 459.6365966796875, 71.848388671875, 69.56192016601562, ],0,  0.8398562073707581),
    Chip([555.624267578125, 460.88177490234375, 70.50860595703125, 69.33505249023438],0,  0.8398104310035706),
    Chip([1073.287353515625, 540.4985961914062, 74.7724609375, 71.8447265625],0,  0.8379409313201904),
    Chip([858.1256713867188, 129.2469482421875, 74.2943115234375, 76.07095336914062],0,  0.8313237428665161),
    Chip([1071.78759765625, 123.8318099975586, 79.2230224609375, 76.13334655761719],0,  0.8153116703033447),
    Chip([446.7274475097656, 139.97897338867188, 76.18682861328125, 75.1452865600586],0,  0.7966620922088623)]
    return Chips_too_many

#enth√§lt einen Chip zu wenig, der aber fliegt und leer ist (Achtung: board ist noch auf dem Kopf!)      
def get_chips_too_few_missing_one_flying_chip():
    Chips_too_few_missing_one_flying_Chip = [Chip([757.431884765625, 458.43499755859375, 71.52508544921875, 70.00146484375], 1, 0.8793290257453918),
    Chip([756.863037109375, 377.8887634277344, 71.99237060546875, 70.31463623046875],1,  0.873580276966095),
    Chip([963.1853637695312, 210.51318359375, 74.4136962890625, 72.75926208496094],0,  0.8688976168632507),
    Chip([454.41766357421875, 382.8651123046875, 71.28396606445312, 69.78067016601562],0,  0.8659213781356812),
    Chip([759.2469482421875, 540.6907348632812, 73.46337890625, 71.12646484375],0,  0.8630877733230591),
    Chip([551.5955810546875, 219.7051239013672, 69.79730224609375, 71.05615234375],0,  0.8621225953102112),
    Chip([455.3941650390625, 462.3099670410156, 70.95352172851562, 69.4892578125],0,  0.8618773221969604),
    Chip([858.6318359375, 212.7769012451172, 74.845947265625, 72.25527954101562],0,  0.8611637353897095),
    Chip([861.9000244140625, 540.4012451171875, 75.37109375, 72.67733764648438],0,  0.8601288795471191),
    Chip([657.3837280273438, 541.4761962890625, 72.5870361328125, 70.89199829101562],0,  0.8588942289352417),
    Chip([753.2552490234375, 132.40829467773438, 70.80914306640625, 72.8939437866211],1,  0.8588289022445679),
    Chip([550.8143310546875, 138.28431701660156, 70.27386474609375, 73.83698272705078],0,  0.8581244945526123),
    Chip([966.580078125, 540.0601806640625, 74.5810546875, 73.21759033203125],0,  0.8578727841377258),
    Chip([859.660888671875, 376.86602783203125, 74.03106689453125, 70.64620971679688],0,  0.8562230467796326),
    Chip([652.8841552734375, 216.8964080810547, 71.87200927734375, 72.11856079101562],0,  0.8558927178382874),
    Chip([452.9756774902344, 302.4188537597656, 71.64715576171875, 71.73211669921875],0,  0.8558539748191833),
    Chip([858.5325927734375, 294.9300842285156, 74.7177734375, 71.93017578125],0,  0.8547179698944092),
    Chip([455.9156494140625, 544.0158081054688, 70.76522827148438, 70.6279296875],0,  0.8543019890785217),
    Chip([755.4547729492188, 295.90179443359375, 72.4365234375, 71.86251831054688],1,  0.8529680371284485),
    Chip([553.4275512695312, 300.57879638671875, 72.4171142578125, 71.06283569335938],0,  0.8528613448143005),
    Chip([964.008056640625, 292.48114013671875, 75.14727783203125, 73.08787536621094],0,  0.851658821105957),
    Chip([754.722412109375, 214.30902099609375, 71.40838623046875, 69.93672180175781],2,  0.8513271808624268),
    Chip([450.794189453125, 221.65708923339844, 72.2364501953125, 72.38320922851562],0,  0.8512446284294128),
    Chip([650.9053955078125, 135.57974243164062, 70.49737548828125, 71.04560852050781],2,  0.850885272026062),
    Chip([1070.109130859375, 290.85577392578125, 73.9307861328125, 72.13796997070312],0,  0.8506991267204285),
    Chip([1072.266845703125, 457.3724365234375, 75.3248291015625, 72.60195922851562],0,  0.8496987819671631),
    Chip([860.6873168945312, 457.35980224609375, 74.2991943359375, 70.03640747070312],0,  0.8496351838111877),
    Chip([965.5115356445312, 457.27874755859375, 74.5234375, 71.0224609375],0,  0.8492321968078613),
    Chip([964.5504150390625, 374.77911376953125, 75.57659912109375, 72.96340942382812],0,  0.848352313041687),
    Chip([556.5145263671875, 542.5208129882812, 71.96148681640625, 70.9677734375],0,  0.8477851152420044),
    Chip([1071.483642578125, 373.90106201171875, 73.953125, 72.93179321289062],0,  0.8456478714942932),
    Chip([654.414306640625, 298.6116638183594, 72.26727294921875, 72.14862060546875],0,  0.8445784449577332),
    Chip([963.0359497070312, 126.91935729980469, 73.9437255859375, 75.3408203125],0,  0.8430204391479492),
    Chip([1069.470458984375, 208.43014526367188, 72.97265625, 73.54804992675781],0,  0.8426612019538879),
    Chip([554.5009765625, 381.0021057128906, 72.2193603515625, 70.09014892578125, ],0,  0.8417767286300659),
    Chip([655.8125, 379.6029357910156, 72.1431884765625, 70.05419921875],0,  0.8399310111999512),
    Chip([656.82080078125, 459.6365966796875, 71.848388671875, 69.56192016601562, ],0,  0.8398562073707581),
    Chip([555.624267578125, 460.88177490234375, 70.50860595703125, 69.33505249023438],0,  0.8398104310035706),
    Chip([1073.287353515625, 540.4985961914062, 74.7724609375, 71.8447265625],0,  0.8379409313201904),
    Chip([858.1256713867188, 129.2469482421875, 74.2943115234375, 76.07095336914062],0,  0.8313237428665161),
    #Chip([1071.78759765625, 123.8318099975586, 79.2230224609375, 76.13334655761719],0,  0.8153116703033447),
    Chip([446.7274475097656, 139.97897338867188, 76.18682861328125, 75.1452865600586],0,  0.7966620922088623)]
    return Chips_too_few_missing_one_flying_Chip    

#enth√§lt zwei Chips zu wenig, die aber fliegen und leer sind (Achtung: board ist noch auf dem Kopf!)      
def get_chips_too_few_missing_flying_chips():
    Chips_too_few_missing_flying_Chips = [Chip([757.431884765625, 458.43499755859375, 71.52508544921875, 70.00146484375], 1, 0.8793290257453918),
    Chip([756.863037109375, 377.8887634277344, 71.99237060546875, 70.31463623046875],1,  0.873580276966095),
    Chip([963.1853637695312, 210.51318359375, 74.4136962890625, 72.75926208496094],0,  0.8688976168632507),
    Chip([454.41766357421875, 382.8651123046875, 71.28396606445312, 69.78067016601562],0,  0.8659213781356812),
    Chip([759.2469482421875, 540.6907348632812, 73.46337890625, 71.12646484375],0,  0.8630877733230591),
    Chip([551.5955810546875, 219.7051239013672, 69.79730224609375, 71.05615234375],0,  0.8621225953102112),
    Chip([455.3941650390625, 462.3099670410156, 70.95352172851562, 69.4892578125],0,  0.8618773221969604),
    Chip([858.6318359375, 212.7769012451172, 74.845947265625, 72.25527954101562],0,  0.8611637353897095),
    Chip([861.9000244140625, 540.4012451171875, 75.37109375, 72.67733764648438],0,  0.8601288795471191),
    Chip([657.3837280273438, 541.4761962890625, 72.5870361328125, 70.89199829101562],0,  0.8588942289352417),
    Chip([753.2552490234375, 132.40829467773438, 70.80914306640625, 72.8939437866211],1,  0.8588289022445679),
    Chip([550.8143310546875, 138.28431701660156, 70.27386474609375, 73.83698272705078],0,  0.8581244945526123),
    Chip([966.580078125, 540.0601806640625, 74.5810546875, 73.21759033203125],0,  0.8578727841377258),
    Chip([859.660888671875, 376.86602783203125, 74.03106689453125, 70.64620971679688],0,  0.8562230467796326),
    Chip([652.8841552734375, 216.8964080810547, 71.87200927734375, 72.11856079101562],0,  0.8558927178382874),
    Chip([452.9756774902344, 302.4188537597656, 71.64715576171875, 71.73211669921875],0,  0.8558539748191833),
    Chip([858.5325927734375, 294.9300842285156, 74.7177734375, 71.93017578125],0,  0.8547179698944092),
    Chip([455.9156494140625, 544.0158081054688, 70.76522827148438, 70.6279296875],0,  0.8543019890785217),
    Chip([755.4547729492188, 295.90179443359375, 72.4365234375, 71.86251831054688],1,  0.8529680371284485),
    Chip([553.4275512695312, 300.57879638671875, 72.4171142578125, 71.06283569335938],0,  0.8528613448143005),
    Chip([964.008056640625, 292.48114013671875, 75.14727783203125, 73.08787536621094],0,  0.851658821105957),
    Chip([754.722412109375, 214.30902099609375, 71.40838623046875, 69.93672180175781],2,  0.8513271808624268),
    Chip([450.794189453125, 221.65708923339844, 72.2364501953125, 72.38320922851562],0,  0.8512446284294128),
    Chip([650.9053955078125, 135.57974243164062, 70.49737548828125, 71.04560852050781],2,  0.850885272026062),
    Chip([1070.109130859375, 290.85577392578125, 73.9307861328125, 72.13796997070312],0,  0.8506991267204285),
    Chip([1072.266845703125, 457.3724365234375, 75.3248291015625, 72.60195922851562],0,  0.8496987819671631),
    Chip([860.6873168945312, 457.35980224609375, 74.2991943359375, 70.03640747070312],0,  0.8496351838111877),
    Chip([965.5115356445312, 457.27874755859375, 74.5234375, 71.0224609375],0,  0.8492321968078613),
    Chip([964.5504150390625, 374.77911376953125, 75.57659912109375, 72.96340942382812],0,  0.848352313041687),
    Chip([556.5145263671875, 542.5208129882812, 71.96148681640625, 70.9677734375],0,  0.8477851152420044),
    Chip([1071.483642578125, 373.90106201171875, 73.953125, 72.93179321289062],0,  0.8456478714942932),
    Chip([654.414306640625, 298.6116638183594, 72.26727294921875, 72.14862060546875],0,  0.8445784449577332),
    Chip([963.0359497070312, 126.91935729980469, 73.9437255859375, 75.3408203125],0,  0.8430204391479492),
    Chip([1069.470458984375, 208.43014526367188, 72.97265625, 73.54804992675781],0,  0.8426612019538879),
    Chip([554.5009765625, 381.0021057128906, 72.2193603515625, 70.09014892578125, ],0,  0.8417767286300659),
    Chip([655.8125, 379.6029357910156, 72.1431884765625, 70.05419921875],0,  0.8399310111999512),
    Chip([656.82080078125, 459.6365966796875, 71.848388671875, 69.56192016601562, ],0,  0.8398562073707581),
    Chip([555.624267578125, 460.88177490234375, 70.50860595703125, 69.33505249023438],0,  0.8398104310035706),
    Chip([1073.287353515625, 540.4985961914062, 74.7724609375, 71.8447265625],0,  0.8379409313201904),
    #Chip([858.1256713867188, 129.2469482421875, 74.2943115234375, 76.07095336914062],0,  0.8313237428665161),
    #Chip([1071.78759765625, 123.8318099975586, 79.2230224609375, 76.13334655761719],0,  0.8153116703033447),
    Chip([446.7274475097656, 139.97897338867188, 76.18682861328125, 75.1452865600586],0,  0.7966620922088623)]
    return Chips_too_few_missing_flying_Chips

#es fehlt ein Stein in der untersten Reihe     
def get_chips_too_few_missing_last_row():
    Chips_too_few_missing_last_row= [Chip([757.431884765625, 458.43499755859375, 71.52508544921875, 70.00146484375], 1, 0.8793290257453918),
    Chip([756.863037109375, 377.8887634277344, 71.99237060546875, 70.31463623046875],1,  0.873580276966095),
    Chip([963.1853637695312, 210.51318359375, 74.4136962890625, 72.75926208496094],0,  0.8688976168632507),
    Chip([454.41766357421875, 382.8651123046875, 71.28396606445312, 69.78067016601562],0,  0.8659213781356812),
    Chip([759.2469482421875, 540.6907348632812, 73.46337890625, 71.12646484375],0,  0.8630877733230591),
    Chip([551.5955810546875, 219.7051239013672, 69.79730224609375, 71.05615234375],0,  0.8621225953102112),
    Chip([455.3941650390625, 462.3099670410156, 70.95352172851562, 69.4892578125],0,  0.8618773221969604),
    Chip([858.6318359375, 212.7769012451172, 74.845947265625, 72.25527954101562],0,  0.8611637353897095),
    Chip([861.9000244140625, 540.4012451171875, 75.37109375, 72.67733764648438],0,  0.8601288795471191),
    Chip([657.3837280273438, 541.4761962890625, 72.5870361328125, 70.89199829101562],0,  0.8588942289352417),
    Chip([753.2552490234375, 132.40829467773438, 70.80914306640625, 72.8939437866211],1,  0.8588289022445679),
    Chip([550.8143310546875, 138.28431701660156, 70.27386474609375, 73.83698272705078],0,  0.8581244945526123),
    Chip([966.580078125, 540.0601806640625, 74.5810546875, 73.21759033203125],0,  0.8578727841377258),
    Chip([859.660888671875, 376.86602783203125, 74.03106689453125, 70.64620971679688],0,  0.8562230467796326),
    Chip([652.8841552734375, 216.8964080810547, 71.87200927734375, 72.11856079101562],0,  0.8558927178382874),
    Chip([452.9756774902344, 302.4188537597656, 71.64715576171875, 71.73211669921875],0,  0.8558539748191833),
    Chip([858.5325927734375, 294.9300842285156, 74.7177734375, 71.93017578125],0,  0.8547179698944092),
    Chip([455.9156494140625, 544.0158081054688, 70.76522827148438, 70.6279296875],0,  0.8543019890785217),
    Chip([755.4547729492188, 295.90179443359375, 72.4365234375, 71.86251831054688],1,  0.8529680371284485),
    Chip([553.4275512695312, 300.57879638671875, 72.4171142578125, 71.06283569335938],0,  0.8528613448143005),
    Chip([964.008056640625, 292.48114013671875, 75.14727783203125, 73.08787536621094],0,  0.851658821105957),
    Chip([754.722412109375, 214.30902099609375, 71.40838623046875, 69.93672180175781],2,  0.8513271808624268),
    Chip([450.794189453125, 221.65708923339844, 72.2364501953125, 72.38320922851562],0,  0.8512446284294128),
    Chip([650.9053955078125, 135.57974243164062, 70.49737548828125, 71.04560852050781],2,  0.850885272026062),
    Chip([1070.109130859375, 290.85577392578125, 73.9307861328125, 72.13796997070312],0,  0.8506991267204285),
    Chip([1072.266845703125, 457.3724365234375, 75.3248291015625, 72.60195922851562],0,  0.8496987819671631),
    Chip([860.6873168945312, 457.35980224609375, 74.2991943359375, 70.03640747070312],0,  0.8496351838111877),
    Chip([965.5115356445312, 457.27874755859375, 74.5234375, 71.0224609375],0,  0.8492321968078613),
    Chip([964.5504150390625, 374.77911376953125, 75.57659912109375, 72.96340942382812],0,  0.848352313041687),
    Chip([556.5145263671875, 542.5208129882812, 71.96148681640625, 70.9677734375],0,  0.8477851152420044),
    Chip([1071.483642578125, 373.90106201171875, 73.953125, 72.93179321289062],0,  0.8456478714942932),
    Chip([654.414306640625, 298.6116638183594, 72.26727294921875, 72.14862060546875],0,  0.8445784449577332),
    Chip([963.0359497070312, 126.91935729980469, 73.9437255859375, 75.3408203125],0,  0.8430204391479492),
    Chip([1069.470458984375, 208.43014526367188, 72.97265625, 73.54804992675781],0,  0.8426612019538879),
    Chip([554.5009765625, 381.0021057128906, 72.2193603515625, 70.09014892578125, ],0,  0.8417767286300659),
    Chip([655.8125, 379.6029357910156, 72.1431884765625, 70.05419921875],0,  0.8399310111999512),
    Chip([656.82080078125, 459.6365966796875, 71.848388671875, 69.56192016601562, ],0,  0.8398562073707581),
    Chip([555.624267578125, 460.88177490234375, 70.50860595703125, 69.33505249023438],0,  0.8398104310035706),
    #Chip([1073.287353515625, 540.4985961914062, 74.7724609375, 71.8447265625],0,  0.8379409313201904),
    Chip([858.1256713867188, 129.2469482421875, 74.2943115234375, 76.07095336914062],0,  0.8313237428665161),
    Chip([1071.78759765625, 123.8318099975586, 79.2230224609375, 76.13334655761719],0,  0.8153116703033447),
    ##
    Chip([293, 32, 79.2230224609375, 76.13334655761719],1,  0.5153116703033447),
    ##
    Chip([446.7274475097656, 139.97897338867188, 76.18682861328125, 75.1452865600586],0,  0.7966620922088623)]
    return Chips_too_few_missing_last_row

def get_chips_too_few_missing_nonflying():
    Chips_too_few_missing_nonflying = [Chip([757.431884765625, 458.43499755859375, 71.52508544921875, 70.00146484375], 1, 0.8793290257453918),
    Chip([756.863037109375, 377.8887634277344, 71.99237060546875, 70.31463623046875],1,  0.873580276966095),
    Chip([963.1853637695312, 210.51318359375, 74.4136962890625, 72.75926208496094],0,  0.8688976168632507),
    Chip([454.41766357421875, 382.8651123046875, 71.28396606445312, 69.78067016601562],0,  0.8659213781356812),
    #Chip([759.2469482421875, 540.6907348632812, 73.46337890625, 71.12646484375],0,  0.8630877733230591),
    Chip([551.5955810546875, 219.7051239013672, 69.79730224609375, 71.05615234375],0,  0.8621225953102112),
    Chip([455.3941650390625, 462.3099670410156, 70.95352172851562, 69.4892578125],0,  0.8618773221969604),
    Chip([858.6318359375, 212.7769012451172, 74.845947265625, 72.25527954101562],0,  0.8611637353897095),
    Chip([861.9000244140625, 540.4012451171875, 75.37109375, 72.67733764648438],0,  0.8601288795471191),
    Chip([657.3837280273438, 541.4761962890625, 72.5870361328125, 70.89199829101562],0,  0.8588942289352417),
    Chip([753.2552490234375, 132.40829467773438, 70.80914306640625, 72.8939437866211],1,  0.8588289022445679),
    Chip([550.8143310546875, 138.28431701660156, 70.27386474609375, 73.83698272705078],0,  0.8581244945526123),
    Chip([966.580078125, 540.0601806640625, 74.5810546875, 73.21759033203125],0,  0.8578727841377258),
    Chip([859.660888671875, 376.86602783203125, 74.03106689453125, 70.64620971679688],0,  0.8562230467796326),
    Chip([652.8841552734375, 216.8964080810547, 71.87200927734375, 72.11856079101562],0,  0.8558927178382874),
    Chip([452.9756774902344, 302.4188537597656, 71.64715576171875, 71.73211669921875],0,  0.8558539748191833),
    Chip([858.5325927734375, 294.9300842285156, 74.7177734375, 71.93017578125],0,  0.8547179698944092),
    Chip([455.9156494140625, 544.0158081054688, 70.76522827148438, 70.6279296875],0,  0.8543019890785217),
    Chip([755.4547729492188, 295.90179443359375, 72.4365234375, 71.86251831054688],1,  0.8529680371284485),
    Chip([553.4275512695312, 300.57879638671875, 72.4171142578125, 71.06283569335938],0,  0.8528613448143005),
    Chip([964.008056640625, 292.48114013671875, 75.14727783203125, 73.08787536621094],0,  0.851658821105957),
    Chip([754.722412109375, 214.30902099609375, 71.40838623046875, 69.93672180175781],2,  0.8513271808624268),
    Chip([450.794189453125, 221.65708923339844, 72.2364501953125, 72.38320922851562],0,  0.8512446284294128),
    Chip([650.9053955078125, 135.57974243164062, 70.49737548828125, 71.04560852050781],2,  0.850885272026062),
    Chip([1070.109130859375, 290.85577392578125, 73.9307861328125, 72.13796997070312],0,  0.8506991267204285),
    Chip([1072.266845703125, 457.3724365234375, 75.3248291015625, 72.60195922851562],0,  0.8496987819671631),
    Chip([860.6873168945312, 457.35980224609375, 74.2991943359375, 70.03640747070312],0,  0.8496351838111877),
    Chip([965.5115356445312, 457.27874755859375, 74.5234375, 71.0224609375],0,  0.8492321968078613),
    Chip([964.5504150390625, 374.77911376953125, 75.57659912109375, 72.96340942382812],0,  0.848352313041687),
    Chip([556.5145263671875, 542.5208129882812, 71.96148681640625, 70.9677734375],0,  0.8477851152420044),
    Chip([1071.483642578125, 373.90106201171875, 73.953125, 72.93179321289062],0,  0.8456478714942932),
    Chip([654.414306640625, 298.6116638183594, 72.26727294921875, 72.14862060546875],0,  0.8445784449577332),
    Chip([963.0359497070312, 126.91935729980469, 73.9437255859375, 75.3408203125],0,  0.8430204391479492),
    Chip([1069.470458984375, 208.43014526367188, 72.97265625, 73.54804992675781],0,  0.8426612019538879),
    Chip([554.5009765625, 381.0021057128906, 72.2193603515625, 70.09014892578125, ],0,  0.8417767286300659),
    Chip([655.8125, 379.6029357910156, 72.1431884765625, 70.05419921875],0,  0.8399310111999512),
    Chip([656.82080078125, 459.6365966796875, 71.848388671875, 69.56192016601562, ],0,  0.8398562073707581),
    Chip([555.624267578125, 460.88177490234375, 70.50860595703125, 69.33505249023438],0,  0.8398104310035706),
    Chip([1073.287353515625, 540.4985961914062, 74.7724609375, 71.8447265625],0,  0.8379409313201904),
    Chip([858.1256713867188, 129.2469482421875, 74.2943115234375, 76.07095336914062],0,  0.8313237428665161),
    Chip([1071.78759765625, 123.8318099975586, 79.2230224609375, 76.13334655761719],0,  0.8153116703033447),
    Chip([446.7274475097656, 139.97897338867188, 76.18682861328125, 75.1452865600586],0,  0.7966620922088623)]
    return Chips_too_few_missing_nonflying


def group_chips_into_columns(chips):
    num_columns=6
    # Sort chips by their y-coordinate
    sorted_chips = sorted(chips, key=lambda chip: chip.bounding_box[1])
    
    # Initialize columns
    columns = [[] for _ in range(num_columns)]
    
    # Calculate the y-coordinate interval for each column
    min_y = sorted_chips[0].bounding_box[1]
    max_y = sorted_chips[-1].bounding_box[1]
    interval = (max_y - min_y) / num_columns
    
    # Group chips into columns
    for chip in sorted_chips:
        y_value = chip.bounding_box[1]
        # Determine the column index based on the y_value
        column_index = int((y_value - min_y) / interval)
        # Make sure the column_index is within bounds
        column_index = min(column_index, num_columns - 1)
        columns[column_index].append(chip)
    
    return columns

def group_chips_into_row(chips):
    num_row=7
    # Sort chips by their x-coordinate
    sorted_chips = sorted(chips, key=lambda chip: chip.bounding_box[0])
    
    # Initialize columns
    row = [[] for _ in range(num_row)]
    
    # Calculate the x-coordinate interval for each column
    min_y = sorted_chips[0].bounding_box[0]
    max_y = sorted_chips[-1].bounding_box[0]
    interval = (max_y - min_y) / num_row
    
    # Group chips into columns
    for chip in sorted_chips:
        y_value = chip.bounding_box[0]
        # Determine the column index based on the y_value
        column_index = int((y_value - min_y) / interval)
        # Make sure the column_index is within bounds
        column_index = min(column_index, num_row - 1)
        row[column_index].append(chip)
    
    return row

def check_for_overlapping(grid):
    for current_chip in grid:
        current_center_X = current_chip.bounding_box[0]+current_chip.bounding_box[2]/2
        current_center_Y = current_chip.bounding_box[1]+current_chip.bounding_box[3]/2
        # check for overlapping Stone
        for stone in grid:
            if(stone == current_chip):
                continue
            if (stone.bounding_box[0] <= current_center_X <= stone.bounding_box[0] + stone.bounding_box[2]) and (stone.bounding_box[1] <= current_center_Y <= stone.bounding_box[1] + stone.bounding_box[3]):
                if(current_chip.confidence>stone.confidence):
                    #remove overlapping stone 
                    grid.remove(stone)
                else:
                    grid.remove(current_chip)
                
                print("Revoved Stone from Board, because it was overlapping")
                print("----")
                print(current_chip)
                print(stone)
                print("----")
    return grid
            
            
def valdation(chips):
    
    column_list = group_chips_into_columns(chips)
    row_list = group_chips_into_row(chips)
    for column in column_list:
        # remove groupe because the stone is alone
        if len(column)==1:
            chips.remove(column[0])
            valdation(chips)
            return
    for row in row_list:
        # remove groupe because the stone is alone
        if len(row)==1:
            chips.remove(row[0])
            valdation(chips)
            return
    for i,column in enumerate(column_list):
        if (len(column)>7):
            print("Warning: There may be an error! More stones in a group of columns than expected!")
        elif len(column)<7:
            for j,row in enumerate(row_list):
                if len(row)<6:
                    new_x = row[0].bounding_box[0]
                    new_y = column[0].bounding_box[1]
                    new_Chip = Chip([new_x,new_y,row[0].bounding_box[2],row[0].bounding_box[3]],0,50)
                    chips.append(new_Chip)
                    valdation(chips)
                    return
    for i,row in enumerate(row_list):
        if (len(row)>6):
            print("Warning: There may be an error! More stones in a group of row than expected!")
        elif len(row)<6:
            for j,column in enumerate(column_list):
                if len(column)<7:
                    new_x = row[0].bounding_box[0]
                    new_y = column[0].bounding_box[1]
                    new_Chip = Chip([new_x,new_y,row[0].bounding_box[2],row[0].bounding_box[3]],0,50)
                    chips.append(new_Chip)
                    valdation(chips)
                    return
    for row in row_list:
        print("---")
        for chip in row:
            print(chip.bounding_box)       
    print(len(chips))

def main():

    chips = get_chips_too_few_missing_last_row()
    #chips = get_chips_correct()
    check_for_overlapping(chips)
    valdation(chips)
    
       
    
    
main()